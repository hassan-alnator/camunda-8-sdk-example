"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  createEnv: () => createEnv
});
module.exports = __toCommonJS(src_exports);
var import_node_process = __toESM(require("process"));
function createEnv(info, options) {
  const env = options?.env ?? import_node_process.default.env;
  const config = {};
  for (const [key, argInfo] of Object.entries(info)) {
    const value = env[key];
    if (!value) {
      if ("default" in argInfo) {
        config[key] = argInfo.default;
      } else if (!argInfo.optional) {
        throw new Error(`Missing environment variable: ${key}`);
      }
      continue;
    }
    if ("parser" in argInfo) {
      config[key] = argInfo.parser(value);
      continue;
    }
    if (argInfo.choices && !argInfo.choices.includes(value)) {
      throw new TypeError(`Invalid value for ${key} environment variable: ${value}`);
    }
    switch (argInfo.type) {
      case "string":
        config[key] = value;
        break;
      case "number":
        config[key] = parseNumber(key, value);
        break;
      case "boolean":
        config[key] = value.toLowerCase() === "true" || value === "1";
        break;
      case "array":
        config[key] = value.split(/, ?/gu);
        break;
    }
  }
  return config;
}
function parseNumber(key, value) {
  const numberValue = Number(value);
  if (Number.isNaN(numberValue)) {
    throw new TypeError(`Invalid value for ${key} environment variable, should be number: ${value}`);
  }
  return numberValue;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createEnv
});
//# sourceMappingURL=index.js.map