// src/index.ts
import process from "process";
function createEnv(info, options) {
  const env = options?.env ?? process.env;
  const config = {};
  for (const [key, argInfo] of Object.entries(info)) {
    const value = env[key];
    if (!value) {
      if ("default" in argInfo) {
        config[key] = argInfo.default;
      } else if (!argInfo.optional) {
        throw new Error(`Missing environment variable: ${key}`);
      }
      continue;
    }
    if ("parser" in argInfo) {
      config[key] = argInfo.parser(value);
      continue;
    }
    if (argInfo.choices && !argInfo.choices.includes(value)) {
      throw new TypeError(`Invalid value for ${key} environment variable: ${value}`);
    }
    switch (argInfo.type) {
      case "string":
        config[key] = value;
        break;
      case "number":
        config[key] = parseNumber(key, value);
        break;
      case "boolean":
        config[key] = value.toLowerCase() === "true" || value === "1";
        break;
      case "array":
        config[key] = value.split(/, ?/gu);
        break;
    }
  }
  return config;
}
function parseNumber(key, value) {
  const numberValue = Number(value);
  if (Number.isNaN(numberValue)) {
    throw new TypeError(`Invalid value for ${key} environment variable, should be number: ${value}`);
  }
  return numberValue;
}
export {
  createEnv
};
//# sourceMappingURL=index.mjs.map