"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogger = void 0;
const winston_1 = __importDefault(require("winston")); // Import Winston
const lib_1 = require("../../lib");
let defaultLogger;
let cachedLogger;
function getLogger(config) {
    const configuration = lib_1.CamundaEnvironmentConfigurator.mergeConfigWithEnvironment(config ?? {});
    // We assume that the SDK user uses a single winston instance for 100% of logging, or no logger at all (in which case we create our own)
    if (config?.logger && cachedLogger !== config.logger) {
        cachedLogger = config.logger;
        config.logger.debug(`Using supplied logger`);
    }
    if (!defaultLogger) {
        // Define the default logger
        const logger = winston_1.default.createLogger({
            level: configuration.CAMUNDA_LOG_LEVEL,
            format: winston_1.default.format.combine(winston_1.default.format.timestamp(), winston_1.default.format.colorize(), winston_1.default.format.simple()),
            transports: [new winston_1.default.transports.Console()],
        }); // eslint-disable-line @typescript-eslint/no-explicit-any
        logger.trace = logger.silly;
        defaultLogger = logger;
    }
    if (!cachedLogger) {
        defaultLogger.debug(`Using default winston logger`);
        cachedLogger = defaultLogger;
    }
    return config?.logger ?? defaultLogger;
}
exports.getLogger = getLogger;
//# sourceMappingURL=C8Logger.js.map